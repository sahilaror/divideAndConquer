									ASSIGNMENT --1
ANS 1

	public class selectionProcedure {
    public static int partition(int arr[],int l , int h){
        int pivot=arr[l];
        int i=l;
        for (int j=i+1; j<=h; j++){
            if (arr[j]<=pivot){
                i++;
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
            int temp=arr[l];
            arr[l]=arr[i];
            arr[i]=temp;

            return i;

    }
    public static int selectipro(int arr[],int l,int h,int k){


            int m = partition(arr, l, h);
            if (m==k-1){
                return arr[m];
            }
            else if(m<k){
                return selectipro(arr,m+1,h,k);
            }
            else
                return selectipro(arr,l,m-1,k);
        }

    public static void main(String[] args) {
        int arr[]={4,3,3,2,1};
        int n=arr.length;
        int k=arr.length+1-4;
      int number=  selectipro(arr,0,n-1,k);
        System.out.println("kth element is:-"+number);
    }
}


ANS 2
	the time complexity of the Quick Select algorithm is O(nlogn).

ANS 3 	
	data structure used in Quick Select algorithm is Array.

ANS 4
	the scheme is used in Quick Select algorithm is Hoare partition scheme.

ANS 5
	the worst-case time complexity of Quick Select algorithm is O(n2).

ANS 6
	In the Quick Select algorithm the first element is chosen as the pivot element.


									ASSIGNMENT--2

ANS 1
	
	import java.util.*;
class Main {
    public static void sortArr(int[] arr, int n) {
        if (n <= 1) {
            return;
        }
        
        int x = -1;
        int y = -1;
        int prev = arr[0];
        
        for (int i = 1; i < n; i++) {
            if (prev > arr[i]) {
                    
                if (x == -1) {
                    x = i - 1;
                    y = i;
                } 
                else {
                    y = i;
                }
            }
                prev = arr[i];
        }
        
        //swapping those two elements
        int temp = arr[x];
        arr[x] = arr[y];
        arr[y] = temp;
    }

    public static void main(String[] args) {

        int[] arr = {1, 2, 4, 9, 8, 7, 12};
    
        int n = arr.length;
    
        sortArr(arr, n);

        for(int i=0;i<n;i++){
            System.out.print(arr[i] + " ");
        }
    }
}

ANS 2
	import java.util.*;
public class Main{
    public static void partition(int[] arr, int s, int e){
        int pIndex= s;
        for (int j = s; j <= e; j++) {
            if (arr[j] < 0){    // pivot is 0
                int temp = arr[j];
                arr[j] = arr[pIndex];
                arr[pIndex] = temp;
                pIndex++;
            }
        }
    }
    public static void main(String[] args){
        int[] arr = { 9, 20, -7, -4, 13, -11, -15, 3 };
        int n = arr.length;
        partition(arr, 0, n - 1);
        for (int i : arr) {
               System.out.print(i + " ");
        }
    }
}

ANS 3
	import java.util.*;
public class Main{
    public static void partition(int[] num, int[] temp, int l, int h){
        if (h <= l) {
            return;
        }
        
        int mid = (l + ((h - l) >> 1));

        partition(num, temp, l, mid);        
        partition(num, temp, mid + 1, h);     

        merge(num, temp , l, mid, h);        
        }
        
        public static void merge(int[] num, int[] temp, int l, int mid, int h){
            int k = l;
            
            for (int i = l; i <= mid; i++) {
                    if (num[i] < 0) {
                            temp[k++] = num[i];
                    }
            }
           
            for (int j = mid + 1; j <= h; j++) {
                    if (num[j] < 0) {
                            temp[k++] = num[j];
                    }
            }
          
            for (int i = l; i <= mid; i++) {
                    if (num[i] >= 0) {
                            temp[k++] = num[i];
                    }
            }
           
            for (int j = mid + 1; j <= h; j++) {
                    if (num[j] >= 0) {
                            temp[k++] = num[j];
                    }
            }
           
            for (int i = l; i <= h; i++) {
                    num[i] = temp[i];
            }
        }
        public static void main(String[] args){
            int[] num = { 19, -20, 7, -4, -13 , 11 , -5 , 3};
            int n = num.length;
            int[] temp = new int[n];
            for (int i = 0; i < n; i++) {
                    temp[i] = num[i];
            }
            partition(num, temp, 0, n - 1);
            for (int i = 0; i < n; i++) {
                    System.out.print(num[i] + " ");
            }
        }
}

ANS 4
		
	import java.util.*;

class Main{
    static boolean isPossible(Integer a[], int b[], int n, int k){

        Arrays.sort(a, Collections.reverseOrder());

        Arrays.sort(b);

        for (int i = 0; i < n; i++)
            if (a[i] + b[i] < k)
                return false;

        return true;
    }
    public static void main(String[] args) {
        Integer a[] = {2, 1, 3, 5, 1};
        int b[] = {7, 8, 9 , 2 , 6};
        int k = 10;
        int n = a.length;

        if (isPossible(a, b, n, k))
            System.out.print("Yes");
        else
            System.out.print("No");
    }
}

ANS 5
		class Main{
    static class Interval{
        int start;
        int end;
        public Interval(int start, int end){
            super();
            this.start = start;
            this.end = end;
        }
    }
    static boolean isIntersect(Interval arr[], int n){
        int max_ele = 0;
        for (int i = 0; i < n; i++)
        {
            if (max_ele < arr[i].end)
                max_ele = arr[i].end;
        }

        int []aux = new int[max_ele + 1];
        for (int i = 0; i < n; i++)
        {

            int x = arr[i].start;

            int y = arr[i].end;
            aux[x]++;
            aux[y ]--;
        }
        for (int i = 1; i <= max_ele; i++)
        {
            aux[i] += aux[i - 1];
            
            if (aux[i] > 1)
                return true;
        }
        return false;
    }
    public static void main(String[] args){
        Interval arr1[] = { new Interval(1, 3), new Interval(7, 9),	new Interval(4, 6), new Interval(10, 13) };
        int n1 = arr1.length;

        if(isIntersect(arr1, n1))
            System.out.print("Yes\n");
        else
            System.out.print("No\n");
    }
}